generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id             String          @id @default(cuid())
  name           String          @unique
  slug           String          @unique
  description    String?
  color          String          @default("#3B82F6")
  icon           String          @default("ðŸ“š")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  certifications Certification[]

  @@map("categories")
}

model Provider {
  id             String          @id @default(cuid())
  name           String          @unique
  slug           String          @unique
  website        String?
  logo           String?
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  certifications Certification[]

  @@map("providers")
}

model Certification {
  id                 String   @id @default(cuid())
  title              String
  slug               String   @unique
  description        String
  shortDescription   String?
  icon               String?
  targetAudience     String[] @default([])
  careerStage        String   @default("entry")
  industryFocus      String[] @default([])
  timeToComplete     Int      @default(0)
  difficultyLevel    Int      @default(3)
  employerDemand     String   @default("Medium")
  isSponsored        Boolean  @default(false)
  partnerDiscount    String?
  price              Int      @default(0)
  originalPrice      Int?
  isSubscription     Boolean  @default(false)
  subscriptionPeriod String?
  studyTimeHours     Int      @default(0)
  studyTimeWeeks     Int      @default(0)
  salaryIncrease     Int      @default(0)
  demandLevel        String   @default("Medium")
  experienceLevel    String   @default("Beginner")
  learningPath       String?
  keySkills          String[] @default([])
  prerequisites      String[] @default([])
  careerOutcomes     String[] @default([])
  enrollUrl          String?
  officialUrl        String?
  guideUrl           String?
  metaTitle          String?
  metaDescription    String?
  keywords           String[] @default([])
  isActive           Boolean  @default(true)
  isFeatured         Boolean  @default(false)
  isPremium          Boolean  @default(false)
  hasGuide           Boolean  @default(false)
  examCode           String?
  validityYears      Int?
  examFormat         String?
  examDuration       Int?
  passingScore       String?
  retakePolicy       String?
  passRate           Int?
  averageScore       String?
  retakeRate         Int?
  prerequisiteCerts  String[]
  complementaryCerts String[]
  nextCerts          String[] @default([])
  categoryId         String
  providerId         String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  category           Category @relation(fields: [categoryId], references: [id])
  provider           Provider @relation(fields: [providerId], references: [id])

  @@index([categoryId])
  @@index([providerId])
  @@index([isFeatured])
  @@index([salaryIncrease])
  @@index([price])
  @@map("certifications")
}

model Guide {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         String
  excerpt         String?
  metaTitle       String?
  metaDescription String?
  keywords        String[]  @default([])
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  certificationId String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("guides")
}

model LearningPath {
  id               String   @id @default(cuid())
  title            String
  description      String
  targetAudience   String
  estimatedIncome  Int
  timeToComplete   Int
  certificationIds String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("learning_paths")
}
